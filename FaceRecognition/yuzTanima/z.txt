# Import OpenCV2,dlib and numpy for image processing
import cv2
import dlib
import numpy as np
import matplotlib.pyplot as plt

detector = dlib.get_frontal_face_detector()

predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")

def createBox(img,points,scale=5,masked = True,cropped = False):
    if masked:
        mask = np.zeros_like(img)
        mask =cv2.fillPoly(mask,[points],(255,255,255))
        img = cv2.bitwise_and(img,mask)
        #cv2.imshow('Mask',mask)
    if cropped:
        bbox = cv2.boundingRect(points)
        x,y,w,h = bbox
        imgCrop = img[y:y+h,x:x+w]
        imgCrop = cv2.resize(imgCrop,(0,0),None,scale,scale)
        return imgCrop
    else:
        return mask

# Görüntüyü yükleme
img = cv2.imread('photos/selenaGomez.jpeg')

img = cv2.resize(img,(0,0),None,0.5,0.5)

imgOriginal = img.copy()

imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

faces = detector(imgGray)

for face in faces:
    x1, y1 = face.left(), face.top()
    x2, y2 = face.right(), face.bottom()  # Yükseklik için bottom() kullanılıyor
    #imgOriginal = cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
    landmarks = predictor(imgGray,face)
    myPoints = []
    for n in range(68):
        x = landmarks.part(n).x
        y = landmarks.part(n).y
        myPoints.append([x,y])
        #cv2.circle(imgOriginal,(x,y),2,(50,50,255),cv2.FILLED)
        #cv2.putText(imgOriginal,str(n),(x,y-10),cv2.FONT_HERSHEY_COMPLEX_SMALL,0.1,(0,0,255),1)
    
    myPoints = np.array(myPoints)
    #imgLeftEye = createBox(img,myPoints[36:42])
    imgLips = createBox(img,myPoints[48:61],3,masked=True,cropped=False) 
    
    imgColorLips = np.zeros_like(imgLips)
    imgColorLips[:] = 153,0,157
    imgColorLips = cv2.bitwise_and(imgLips,imgColorLips)
    imgColorLips = cv2.GaussianBlur(imgColorLips,(7,7),10)
    imgOriginal = cv2.cvtColor(imgOriginal,cv2.COLOR_BGR2GRAY)
    imgOriginal = cv2.cvtColor(imgOriginal,cv2.COLOR_GRAY2BGR)                           
    imgColorLips = cv2.addWeighted(imgOriginal,1,imgColorLips,0.4,0)
    cv2.imshow('Colored',imgColorLips)
    cv2.waitKey(0)
    
    #cv2.imshow('lips',imgLips)
    
    print(myPoints)